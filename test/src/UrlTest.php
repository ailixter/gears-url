<?php

namespace Ailixter\Gears;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-06 at 16:35:45.
 */
class UrlTest extends \PHPUnit_Framework_TestCase
{

    const FULL_URL = 'scheme://user:pass@host:1/path?param=1#fragment';

    /**
     * @var Url
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Url;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     */
    public function testClear()
    {
        $this->object->set('https://example.com/path?p=123');
        self::assertTrue(isset($this->object->host));
        self::assertTrue(isset($this->object->scheme));
        self::assertTrue(isset($this->object->path));
        self::assertTrue(isset($this->object->query));
        $this->object->clear();
        self::assertEquals('', (string)$this->object);
    }

    /**
     */
    public function testAssign()
    {
        self::assertEquals(self::FULL_URL, (string)$this->object->assign((new Url)->set(self::FULL_URL)));
    }

    private function functionName($param)
    {
        static $all;
        if (!$all) {
            $all = array_keys(parse_url(self::FULL_URL));
        }
        $param = is_array($param) ? $param : array_map('trim', explode(',', $param));
        return array_merge(array_fill_keys($all, false), array_fill_keys($param, true));
    }

    public function urlProvider()
    {
        return [
            ['test', 'path'],
            ['/test/1', 'path'],
            ['../test/1', 'path'],
            ['example.com/test/1?a=1&b=2', 'path,query'],
            ['example.com:123', 'host,port', '//example.com:123'],
            ['example.com:123/test/1', 'host,path,port', '//example.com:123/test/1'],
            ['://example.com', 'path'],
            [':/example.com', 'path'],
            ['::example.com', 'path'],
            ['http:test/1', 'scheme,path'],
            ['http:../test/1', 'scheme,path'],
            ['http:/test/1', 'scheme,path'],
            ['//example.com/', 'host, path'],
            ['//example.com/?a=1&b=2', 'host, path, query'],
            ['//example.com/test/1?a=1&b=2', 'host, path, query'],
            ['//example.com?a=1&b=2', 'host, query'],
            ['//ailixter@example.com', 'user, host'],
            ['//ailixter:$123=456@example.com', 'user,pass,host'],
            ['http://example.com:8080/test/1?a=1&b=2', 'scheme,host,port,path,query'],
            ['http://example.com/test/1?a=1&b=2', 'scheme,host,path,query'],
            ['https://www.example.com/test/1?a=1&b=2#abc', 'scheme,host,path,query,fragment'],
            ['https://госуслуги.рф/тест/1?ж=опа#abc', 'scheme,host,path,query,fragment',
                'https://госуслуги.рф/тест/1?%D0%B6=%D0%BE%D0%BF%D0%B0#abc'],
            ['https://example.com/test/1?abc/123&def=456', 'scheme,host,path,query',
                'https://example.com/test/1?abc%2F123=&def=456'],
        ];
    }

    /**
     * @dataProvider urlProvider
     */
    public function test__toString($test, $mask, $expected = null)
    {
        $this->object->set($test);
        $mask = $this->functionName($mask);
        foreach ($mask as $key => $value) {
            $isset = isset($this->object->$key);
            if ($value) {
                self::assertTrue($isset, $key);
            } else {
                self::assertFalse($isset, $key);
            }
        }
        self::assertEquals($expected ?: $test, (string)$this->object);
    }

    public function urlProviderBad()
    {
        return [
            //['not an url'],
            ['https://example.com:port/1'],
        ];
    }

    /**
     * @expectedException \Ailixter\Gears\Exceptions\UrlException
     * @dataProvider urlProviderBad
     */
    public function test__toStringBad($test)
    {
        $this->object->set($test);
        $url = (string)$this->object;
        self::assertEquals(false, $url); //SIC!
    }

    /**
     */
    public function testIsConsistent()
    {
        self::assertTrue($this->object->set(self::FULL_URL)->isConsistent());
        unset(
            $this->object->scheme,
            $this->object->port,
            $this->object->query,
            $this->object->fragment
        );
        self::assertTrue($this->object->isConsistent());
        self::assertEquals('//user:pass@host/path', (string)$this->object);
        unset($this->object->host);
        self::assertFalse($this->object->isConsistent());
    }

    public function testGetQueryParamAsProp()
    {
        self::expectException(\PHPUnit_Framework_Error::class);
        self::expectException(\ArgumentCountError::class);
        $x = $this->object->queryParam;
    }

    public function testSetQueryParamAsProp()
    {
        self::expectException(\PHPUnit_Framework_Error::class);
        self::expectException(\ArgumentCountError::class);
        $this->object->queryParam = 123;
    }

    /**
     */
    public function testSetQueryParam()
    {
        $this->object
            ->set(self::FULL_URL)
            ->setQueryParam('int', 123)
            ->setQueryParam('array', $this->object->query)
        ;
        $url = (string)$this->object;
        self::assertEquals('scheme://user:pass@host:1/path?param=1&int=123&array%5Bparam%5D=1&array%5Bint%5D=123#fragment', $url);

        return (string)$url;
    }

    /**
     * @depends testSetQueryParam
     * @param string $url
     */
    public function testGetQueryParam($url)
    {
        $this->object->set($url);
        self::assertEquals('123', $this->object->getQueryParam('int'));
        self::assertEquals('123', $this->object->getQueryParam('array')['int']);
        self::assertEquals('???', $this->object->getQueryParam('undefined', '???'));
    }

    public function manualBuildProvider()
    {
        $urlx = new Url;
        $url0 = new Url;
        $url1 = new Url;
        $urln = new Url;
        foreach (Url::propertyKeys() as $key) {
            $url0->$key = false;
            $url1->$key = true;
            $urln->$key = null;
        }
        return [
            [$urlx, '', 'empty'],
            [$url0, '://:@:/#', 'falses'],
            [$url1, '1://1:1@1:1/1?1=#1', 'trues'],
            [$urln, '', 'nulls'],
        ];
    }

    /**
     * @dataProvider manualBuildProvider
     */
    public function testManualBuild(Url $url, $expected, $msg)
    {
        self::assertEquals($expected, (string)$url, $msg);
    }

    public function testAutoGetQuery()
    {
        self::assertEquals(['x' => 123], $this->object->setQuery(['x' => 123])->getQuery());
    }

    public function keysProvider()
    {
        return array_map(function ($key) {
            return [$key];
        }, Url::propertyKeys());
    }

    /**
     * @dataProvider keysProvider
     */
    public function testGetSetAll($key)
    {
        $this->object->{'set' . ucfirst($key)}('*' . $key);
        self::assertEquals($this->object->$key, $this->object->{'get' . ucfirst($key)}());
    }

}
